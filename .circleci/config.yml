version: 2.1

orbs:
  slack: circleci/slack@4.12.0
  aws-cli: circleci/aws-cli@3.1.4
  # ansible_upload: orbss/ansible_upload@0.2.8
  # slack: circleci/slack@4.10.1

commands:

  failure_notifcation:
    steps:
      - slack/notify:
          event: fail
          channel: udapeople-alerting
          template: basic_fail_1

  install_awscli:
    steps:
      - run:
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    steps:
      - run:
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  # install_nodejs:
  #   description: Install Node.js 
  #   steps:
  #     - run:
  #         name: Install Node.js 
  #         command: |
  #           curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
  #           sudo apt install -y nodejs
 
  # install_nodejs:
  #   description: Install Node.js 13
  #   steps:
  #     - run: 
  #         name: Install Node.js 13
  #         command: |
  #          curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
  #          sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_ID >>
             aws s3 rm s3://udapeople-<<parameters.workflow_ID>> --recursive
             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_ID >>
  remove-bucket-contents:
    description: Remove contents of bucket
    parameters:
      bucket_name:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Remove contents of bucket
          when: on_fail
          command: |
             # your code here
             aws s3 rm s3://udapeople-<< parameters.bucket_name >> --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Revert migrations
          when: on_fail 
          command: |         
            SUCCESS=$(curl --insecure https://kvdb.io/NQbYvstDo7oAv5Y7jY5Hdz/migration_<< parameters.workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies

      # - failure_notifcation

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]

      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
      # - failure_notifcation

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install  
            npm run test
  #     - failure_notifcation

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
  #     - failure_notifcation

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: scan frontend dependencies
          command: |
              cd frontend
              npm install
              npm update
              npm audit fix --audit-level=critical --force             
      # - failure_notifcation


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: scan backend dependencies
          command: |
             cd backend
             npm install             
             npm update
             npm audit fix --audit-level=critical --force   
             
      # - failure_notifcation

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      
      - run: yum -y install tar gzip     
      - persist_to_workspace: 
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment
    
  
  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            yum install -y gcc libffi-devel python3 epel-release && \
            yum install -y python3-pip && \
            yum install -y wget && \
            yum clean all && \
            yum update -y && \
            yum install -y tar gzip curl unzip openssh-server openssh-clients && \
            python3 -m pip install ansible
      # - install_awscli
      # - install_ansible
      - add_ssh_keys:
          fingerprints: 
          - "64:fd:52:42:8f:f6:6b:84:a1:68:fa:06:ee:32:81:1c"
      
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - run:
          name: node_exporter
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt node-exporter.yml
      - revert-migrations
      - destroy-environment 


  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # - install_awscli
      - restore_cache:
          keys: [ build-backend]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/NQbYvstDo7oAv5Y7jY5Hdz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  # deploy-frontend:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - restore_cache:
  #         keys: [frontend-dependencies]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd frontend
  #           npm install
  #     - run:
  #         name: Get backend url
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text)

  #           echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}  --recursive

  #     - destroy-environment    
  #     - revert-migrations

  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_ansible
  #     - install_nodejs
  #     - add_ssh_keys:
  #         fingerprints: ["64:fd:52:42:8f:f6:6b:84:a1:68:fa:06:ee:32:81:1c"]
      
  #     - attach_workspace:
  #         at: ~/
      
  #     - restore_cache:
  #         keys: [backend-dependencies]
      
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd backend
  #           npm install 

  #     - run:
  #         name: package backend
  #         command: |
  #           cd backend
  #           npm run build
  #           # Zip the directory
  #           tar -czf artifact.tar.gz dist/* package*

  #           cd ..
  #           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

  #     - run:
  #         name: deploy backend
  #         command: |
  #           export TYPEORM_MIGRATIONS_DIR=./migrations
  #           export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
  #           export TYPEORM_MIGRATIONS=./migrations/*.ts

  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment    
  #     - revert-migrations

  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update && \
            sudo apt install -y tar gzip curl
      - run:
          name: Install npm
          command: |
             # your code here
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build  
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      # Here's where you will add some code to rollback on failure   
      # - remove-bucket-contents
      - destroy-environment
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: python:3.7-alpine3.16
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #          fingerprints: ["64:fd:52:42:8f:f6:6b:84:a1:68:fa:06:ee:32:81:1c"]
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
  #     - restore_cache:
  #         keys: [build-backend]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/

  #     # - install_nodejs
  #     # - install_awscli
  #     - install_ansible
  #     - run: 
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..

  #           cd .circleci/ansible
  #           mkdir files
  #           cd files
  #           tar -C ../../../backend -czvf artifact.tar.gz . 
  #           cd ../

  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml

  #     # Here's where you will add some code to rollback on failure
  #     - revert-migrations
  #     - destroy-environment

  deploy-backend:
    docker:
      - image: cimg/python:3.7-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["64:fd:52:42:8f:f6:6b:84:a1:68:fa:06:ee:32:81:1c"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Deploy backend
          working_directory: backend
          command: |
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat /tmp/workspace/inventory.txt
            ansible-playbook -i /tmp/workspace/inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations



  # smoke-test:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - install_awscli

  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text)

  #           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
  #           echo ${API_URL}
            
  #           if curl -s $API_URL/api/status | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi 
            
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
  #           if curl -s $FRONTEND_WEBSITE | grep "Welcome"
  #           then
  #             exit 0 
  #           else 
  #             exit 1
  #           fi 

  #     - destroy-environment    
  #     - revert-migrations 

  # cloudfront-update:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - install_awscli
      
  #     - run:
  #         name: Save Old Workflow ID to kvdb.io
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #             --no-paginate --output text)

  #           echo "Old Workflow ID:"$OLD_WORKFLOW_ID"
  #           curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}""
            
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #             aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name "InitialStack" \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 

  #     - destroy-environment    
  #     - revert-migrations 

  # cleanup:
  #     docker:
  #       - image: cimg/node:13.8.0
  #     steps:
  #       - checkout
  #       - install_awscli

  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             export STACKS=($(aws cloudformation list-stacks 
  #             --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              
  #             echo Stack names: "${STACKS[@]}" 

  #             export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
  #             echo Old Workflow ID: $OldWorkflowID
              
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #             fi
              
  # succss_notification:
  #   docker:
  #     - image: cimg/base:stable        
  #   steps:
  #     - slack/notify:
  #         event: pass
  #         channel: udapeople-alerting
  #         template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      # - succss_notification:
          # requires: [cleanup]



